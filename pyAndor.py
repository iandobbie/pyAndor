# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyAndor', [dirname(__file__)])
        except ImportError:
            import _pyAndor
            return _pyAndor
        if fp is not None:
            try:
                _mod = imp.load_module('_pyAndor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyAndor = swig_import_helper()
    del swig_import_helper
else:
    import _pyAndor
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class AndorCapabilities(_object):
    """Proxy of C++ AndorCapabilities class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AndorCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AndorCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ulSize"] = _pyAndor.AndorCapabilities_ulSize_set
    __swig_getmethods__["ulSize"] = _pyAndor.AndorCapabilities_ulSize_get
    if _newclass:ulSize = _swig_property(_pyAndor.AndorCapabilities_ulSize_get, _pyAndor.AndorCapabilities_ulSize_set)
    __swig_setmethods__["ulAcqModes"] = _pyAndor.AndorCapabilities_ulAcqModes_set
    __swig_getmethods__["ulAcqModes"] = _pyAndor.AndorCapabilities_ulAcqModes_get
    if _newclass:ulAcqModes = _swig_property(_pyAndor.AndorCapabilities_ulAcqModes_get, _pyAndor.AndorCapabilities_ulAcqModes_set)
    __swig_setmethods__["ulReadModes"] = _pyAndor.AndorCapabilities_ulReadModes_set
    __swig_getmethods__["ulReadModes"] = _pyAndor.AndorCapabilities_ulReadModes_get
    if _newclass:ulReadModes = _swig_property(_pyAndor.AndorCapabilities_ulReadModes_get, _pyAndor.AndorCapabilities_ulReadModes_set)
    __swig_setmethods__["ulTriggerModes"] = _pyAndor.AndorCapabilities_ulTriggerModes_set
    __swig_getmethods__["ulTriggerModes"] = _pyAndor.AndorCapabilities_ulTriggerModes_get
    if _newclass:ulTriggerModes = _swig_property(_pyAndor.AndorCapabilities_ulTriggerModes_get, _pyAndor.AndorCapabilities_ulTriggerModes_set)
    __swig_setmethods__["ulCameraType"] = _pyAndor.AndorCapabilities_ulCameraType_set
    __swig_getmethods__["ulCameraType"] = _pyAndor.AndorCapabilities_ulCameraType_get
    if _newclass:ulCameraType = _swig_property(_pyAndor.AndorCapabilities_ulCameraType_get, _pyAndor.AndorCapabilities_ulCameraType_set)
    __swig_setmethods__["ulPixelMode"] = _pyAndor.AndorCapabilities_ulPixelMode_set
    __swig_getmethods__["ulPixelMode"] = _pyAndor.AndorCapabilities_ulPixelMode_get
    if _newclass:ulPixelMode = _swig_property(_pyAndor.AndorCapabilities_ulPixelMode_get, _pyAndor.AndorCapabilities_ulPixelMode_set)
    __swig_setmethods__["ulSetFunctions"] = _pyAndor.AndorCapabilities_ulSetFunctions_set
    __swig_getmethods__["ulSetFunctions"] = _pyAndor.AndorCapabilities_ulSetFunctions_get
    if _newclass:ulSetFunctions = _swig_property(_pyAndor.AndorCapabilities_ulSetFunctions_get, _pyAndor.AndorCapabilities_ulSetFunctions_set)
    __swig_setmethods__["ulGetFunctions"] = _pyAndor.AndorCapabilities_ulGetFunctions_set
    __swig_getmethods__["ulGetFunctions"] = _pyAndor.AndorCapabilities_ulGetFunctions_get
    if _newclass:ulGetFunctions = _swig_property(_pyAndor.AndorCapabilities_ulGetFunctions_get, _pyAndor.AndorCapabilities_ulGetFunctions_set)
    __swig_setmethods__["ulFeatures"] = _pyAndor.AndorCapabilities_ulFeatures_set
    __swig_getmethods__["ulFeatures"] = _pyAndor.AndorCapabilities_ulFeatures_get
    if _newclass:ulFeatures = _swig_property(_pyAndor.AndorCapabilities_ulFeatures_get, _pyAndor.AndorCapabilities_ulFeatures_set)
    __swig_setmethods__["ulPCICard"] = _pyAndor.AndorCapabilities_ulPCICard_set
    __swig_getmethods__["ulPCICard"] = _pyAndor.AndorCapabilities_ulPCICard_get
    if _newclass:ulPCICard = _swig_property(_pyAndor.AndorCapabilities_ulPCICard_get, _pyAndor.AndorCapabilities_ulPCICard_set)
    __swig_setmethods__["ulEMGainCapability"] = _pyAndor.AndorCapabilities_ulEMGainCapability_set
    __swig_getmethods__["ulEMGainCapability"] = _pyAndor.AndorCapabilities_ulEMGainCapability_get
    if _newclass:ulEMGainCapability = _swig_property(_pyAndor.AndorCapabilities_ulEMGainCapability_get, _pyAndor.AndorCapabilities_ulEMGainCapability_set)
    def __init__(self): 
        """__init__(self) -> AndorCapabilities"""
        this = _pyAndor.new_AndorCapabilities()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyAndor.delete_AndorCapabilities
    __del__ = lambda self : None;
AndorCapabilities_swigregister = _pyAndor.AndorCapabilities_swigregister
AndorCapabilities_swigregister(AndorCapabilities)

class ColorDemosaicInfo(_object):
    """Proxy of C++ ColorDemosaicInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorDemosaicInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorDemosaicInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iX"] = _pyAndor.ColorDemosaicInfo_iX_set
    __swig_getmethods__["iX"] = _pyAndor.ColorDemosaicInfo_iX_get
    if _newclass:iX = _swig_property(_pyAndor.ColorDemosaicInfo_iX_get, _pyAndor.ColorDemosaicInfo_iX_set)
    __swig_setmethods__["iY"] = _pyAndor.ColorDemosaicInfo_iY_set
    __swig_getmethods__["iY"] = _pyAndor.ColorDemosaicInfo_iY_get
    if _newclass:iY = _swig_property(_pyAndor.ColorDemosaicInfo_iY_get, _pyAndor.ColorDemosaicInfo_iY_set)
    __swig_setmethods__["iAlgorithm"] = _pyAndor.ColorDemosaicInfo_iAlgorithm_set
    __swig_getmethods__["iAlgorithm"] = _pyAndor.ColorDemosaicInfo_iAlgorithm_get
    if _newclass:iAlgorithm = _swig_property(_pyAndor.ColorDemosaicInfo_iAlgorithm_get, _pyAndor.ColorDemosaicInfo_iAlgorithm_set)
    __swig_setmethods__["iXPhase"] = _pyAndor.ColorDemosaicInfo_iXPhase_set
    __swig_getmethods__["iXPhase"] = _pyAndor.ColorDemosaicInfo_iXPhase_get
    if _newclass:iXPhase = _swig_property(_pyAndor.ColorDemosaicInfo_iXPhase_get, _pyAndor.ColorDemosaicInfo_iXPhase_set)
    __swig_setmethods__["iYPhase"] = _pyAndor.ColorDemosaicInfo_iYPhase_set
    __swig_getmethods__["iYPhase"] = _pyAndor.ColorDemosaicInfo_iYPhase_get
    if _newclass:iYPhase = _swig_property(_pyAndor.ColorDemosaicInfo_iYPhase_get, _pyAndor.ColorDemosaicInfo_iYPhase_set)
    __swig_setmethods__["iBackground"] = _pyAndor.ColorDemosaicInfo_iBackground_set
    __swig_getmethods__["iBackground"] = _pyAndor.ColorDemosaicInfo_iBackground_get
    if _newclass:iBackground = _swig_property(_pyAndor.ColorDemosaicInfo_iBackground_get, _pyAndor.ColorDemosaicInfo_iBackground_set)
    def __init__(self): 
        """__init__(self) -> ColorDemosaicInfo"""
        this = _pyAndor.new_ColorDemosaicInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyAndor.delete_ColorDemosaicInfo
    __del__ = lambda self : None;
ColorDemosaicInfo_swigregister = _pyAndor.ColorDemosaicInfo_swigregister
ColorDemosaicInfo_swigregister(ColorDemosaicInfo)


def AbortAcquisition():
  """AbortAcquisition() -> unsigned int"""
  return _pyAndor.AbortAcquisition()

def CancelWait():
  """CancelWait() -> unsigned int"""
  return _pyAndor.CancelWait()

def CoolerOFF():
  """CoolerOFF() -> unsigned int"""
  return _pyAndor.CoolerOFF()

def CoolerON():
  """CoolerON() -> unsigned int"""
  return _pyAndor.CoolerON()

def DemosaicImage(*args, **kwargs):
  """DemosaicImage(WORD _input, WORD _red, WORD _green, WORD _blue,  _info) -> unsigned int"""
  return _pyAndor.DemosaicImage(*args, **kwargs)

def FreeInternalMemory():
  """FreeInternalMemory() -> unsigned int"""
  return _pyAndor.FreeInternalMemory()

def GetAcquiredData(*args, **kwargs):
  """GetAcquiredData(long array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetAcquiredData(*args, **kwargs)

def GetAcquiredData16(*args, **kwargs):
  """GetAcquiredData16(WORD array) -> unsigned int"""
  return _pyAndor.GetAcquiredData16(*args, **kwargs)

def GetAcquiredFloatData(*args, **kwargs):
  """GetAcquiredFloatData(float array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetAcquiredFloatData(*args, **kwargs)

def GetAcquisitionProgress():
  """GetAcquisitionProgress() -> unsigned int"""
  return _pyAndor.GetAcquisitionProgress()

def GetAcquisitionTimings():
  """GetAcquisitionTimings() -> unsigned int"""
  return _pyAndor.GetAcquisitionTimings()

def GetAllDMAData(*args, **kwargs):
  """GetAllDMAData(long array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetAllDMAData(*args, **kwargs)

def GetAmpDesc(*args, **kwargs):
  """GetAmpDesc(int index, char name, int len) -> unsigned int"""
  return _pyAndor.GetAmpDesc(*args, **kwargs)

def GetAmpMaxSpeed(*args, **kwargs):
  """GetAmpMaxSpeed(int index) -> unsigned int"""
  return _pyAndor.GetAmpMaxSpeed(*args, **kwargs)

def GetAvailableCameras(*args, **kwargs):
  """GetAvailableCameras(long totalCameras) -> unsigned int"""
  return _pyAndor.GetAvailableCameras(*args, **kwargs)

def GetBackground(*args, **kwargs):
  """GetBackground(long array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetBackground(*args, **kwargs)

def GetBitDepth(*args, **kwargs):
  """GetBitDepth(int channel) -> unsigned int"""
  return _pyAndor.GetBitDepth(*args, **kwargs)

def GetCameraHandle(*args, **kwargs):
  """GetCameraHandle(long cameraIndex) -> unsigned int"""
  return _pyAndor.GetCameraHandle(*args, **kwargs)

def GetCameraInformation(*args, **kwargs):
  """GetCameraInformation(int index) -> unsigned int"""
  return _pyAndor.GetCameraInformation(*args, **kwargs)

def GetCameraSerialNumber():
  """GetCameraSerialNumber() -> unsigned int"""
  return _pyAndor.GetCameraSerialNumber()

def GetCapabilities(*args, **kwargs):
  """GetCapabilities( caps) -> unsigned int"""
  return _pyAndor.GetCapabilities(*args, **kwargs)

def GetCurrentCamera():
  """GetCurrentCamera() -> unsigned int"""
  return _pyAndor.GetCurrentCamera()

def GetDDGIOCPulses(*args, **kwargs):
  """GetDDGIOCPulses(int pulses) -> unsigned int"""
  return _pyAndor.GetDDGIOCPulses(*args, **kwargs)

def GetDDGPulse(*args, **kwargs):
  """GetDDGPulse(double width, double resolution) -> unsigned int"""
  return _pyAndor.GetDDGPulse(*args, **kwargs)

def GetDetector():
  """GetDetector() -> unsigned int"""
  return _pyAndor.GetDetector()

def GetDICameraInfo(*args, **kwargs):
  """GetDICameraInfo(void info) -> unsigned int"""
  return _pyAndor.GetDICameraInfo(*args, **kwargs)

def GetEMCCDGain():
  """GetEMCCDGain() -> unsigned int"""
  return _pyAndor.GetEMCCDGain()

def GetEMGainRange():
  """GetEMGainRange() -> unsigned int"""
  return _pyAndor.GetEMGainRange()

def GetFastestRecommendedVSSpeed():
  """GetFastestRecommendedVSSpeed() -> unsigned int"""
  return _pyAndor.GetFastestRecommendedVSSpeed()

def GetFilterMode(*args, **kwargs):
  """GetFilterMode(int mode) -> unsigned int"""
  return _pyAndor.GetFilterMode(*args, **kwargs)

def GetFIFOUsage():
  """GetFIFOUsage() -> unsigned int"""
  return _pyAndor.GetFIFOUsage()

def GetFKExposureTime():
  """GetFKExposureTime() -> unsigned int"""
  return _pyAndor.GetFKExposureTime()

def GetFKVShiftSpeed(*args, **kwargs):
  """GetFKVShiftSpeed(int index) -> unsigned int"""
  return _pyAndor.GetFKVShiftSpeed(*args, **kwargs)

def GetFKVShiftSpeedF(*args, **kwargs):
  """GetFKVShiftSpeedF(int index) -> unsigned int"""
  return _pyAndor.GetFKVShiftSpeedF(*args, **kwargs)

def GetHardwareVersion():
  """GetHardwareVersion() -> unsigned int"""
  return _pyAndor.GetHardwareVersion()

def GetHeadModel():
  """GetHeadModel() -> unsigned int"""
  return _pyAndor.GetHeadModel()

def GetHorizontalSpeed(*args, **kwargs):
  """GetHorizontalSpeed(int index) -> unsigned int"""
  return _pyAndor.GetHorizontalSpeed(*args, **kwargs)

def GetHSSpeed(*args, **kwargs):
  """GetHSSpeed(int channel, int type, int index) -> unsigned int"""
  return _pyAndor.GetHSSpeed(*args, **kwargs)

def GetHVflag():
  """GetHVflag() -> unsigned int"""
  return _pyAndor.GetHVflag()

def GetID(*args, **kwargs):
  """GetID(int devNum) -> unsigned int"""
  return _pyAndor.GetID(*args, **kwargs)

def GetImages(*args, **kwargs):
  """GetImages(long first, long last, long array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetImages(*args, **kwargs)

def GetImages16(*args, **kwargs):
  """GetImages16(long first, long last, WORD array) -> unsigned int"""
  return _pyAndor.GetImages16(*args, **kwargs)

def GetImagesPerDMA(*args, **kwargs):
  """GetImagesPerDMA(unsigned long images) -> unsigned int"""
  return _pyAndor.GetImagesPerDMA(*args, **kwargs)

def GetMaximumBinning(*args, **kwargs):
  """GetMaximumBinning(int ReadMode, int HorzVert) -> unsigned int"""
  return _pyAndor.GetMaximumBinning(*args, **kwargs)

def GetMaximumExposure():
  """GetMaximumExposure() -> unsigned int"""
  return _pyAndor.GetMaximumExposure()

def GetMinimumImageLength():
  """GetMinimumImageLength() -> unsigned int"""
  return _pyAndor.GetMinimumImageLength()

def GetMCPGain(*args, **kwargs):
  """GetMCPGain(int iNum, int iGain, float fPhotoepc) -> unsigned int"""
  return _pyAndor.GetMCPGain(*args, **kwargs)

def GetMCPVoltage():
  """GetMCPVoltage() -> unsigned int"""
  return _pyAndor.GetMCPVoltage()

def GetMostRecentColorImage16(*args, **kwargs):
  """
    GetMostRecentColorImage16(unsigned long size, int algorithm, WORD red, WORD green, 
        WORD blue) -> unsigned int
    """
  return _pyAndor.GetMostRecentColorImage16(*args, **kwargs)

def GetMostRecentImage(*args, **kwargs):
  """GetMostRecentImage(long array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetMostRecentImage(*args, **kwargs)

def GetMostRecentImage16(*args, **kwargs):
  """GetMostRecentImage16(WORD array) -> unsigned int"""
  return _pyAndor.GetMostRecentImage16(*args, **kwargs)

def GetNewData(*args, **kwargs):
  """GetNewData(long array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetNewData(*args, **kwargs)

def GetNewData16(*args, **kwargs):
  """GetNewData16(WORD array) -> unsigned int"""
  return _pyAndor.GetNewData16(*args, **kwargs)

def GetNewFloatData(*args, **kwargs):
  """GetNewFloatData(float array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetNewFloatData(*args, **kwargs)

def GetNumberADChannels():
  """GetNumberADChannels() -> unsigned int"""
  return _pyAndor.GetNumberADChannels()

def GetNumberAmp(*args, **kwargs):
  """GetNumberAmp(int amp) -> unsigned int"""
  return _pyAndor.GetNumberAmp(*args, **kwargs)

def GetNumberDevices():
  """GetNumberDevices() -> unsigned int"""
  return _pyAndor.GetNumberDevices()

def GetNumberFKVShiftSpeeds():
  """GetNumberFKVShiftSpeeds() -> unsigned int"""
  return _pyAndor.GetNumberFKVShiftSpeeds()

def GetNumberHorizontalSpeeds():
  """GetNumberHorizontalSpeeds() -> unsigned int"""
  return _pyAndor.GetNumberHorizontalSpeeds()

def GetNumberHSSpeeds(*args, **kwargs):
  """GetNumberHSSpeeds(int channel, int type) -> unsigned int"""
  return _pyAndor.GetNumberHSSpeeds(*args, **kwargs)

def GetNumberNewImages():
  """GetNumberNewImages() -> unsigned int"""
  return _pyAndor.GetNumberNewImages()

def GetNumberPreAmpGains():
  """GetNumberPreAmpGains() -> unsigned int"""
  return _pyAndor.GetNumberPreAmpGains()

def GetNumberVerticalSpeeds():
  """GetNumberVerticalSpeeds() -> unsigned int"""
  return _pyAndor.GetNumberVerticalSpeeds()

def GetNumberVSAmplitudes():
  """GetNumberVSAmplitudes() -> unsigned int"""
  return _pyAndor.GetNumberVSAmplitudes()

def GetNumberVSSpeeds():
  """GetNumberVSSpeeds() -> unsigned int"""
  return _pyAndor.GetNumberVSSpeeds()

def GetOldestImage(*args, **kwargs):
  """GetOldestImage(long array, unsigned long size) -> unsigned int"""
  return _pyAndor.GetOldestImage(*args, **kwargs)

def GetOldestImage16(*args, **kwargs):
  """GetOldestImage16(WORD array) -> unsigned int"""
  return _pyAndor.GetOldestImage16(*args, **kwargs)

def GetPhysicalDMAAddress(*args, **kwargs):
  """GetPhysicalDMAAddress(unsigned long Address1, unsigned long Address2) -> unsigned int"""
  return _pyAndor.GetPhysicalDMAAddress(*args, **kwargs)

def GetPixelSize():
  """GetPixelSize() -> unsigned int"""
  return _pyAndor.GetPixelSize()

def GetPreAmpGain(*args, **kwargs):
  """GetPreAmpGain(int index) -> unsigned int"""
  return _pyAndor.GetPreAmpGain(*args, **kwargs)

def GetRegisterDump():
  """GetRegisterDump() -> unsigned int"""
  return _pyAndor.GetRegisterDump()

def GetSizeOfCircularBuffer():
  """GetSizeOfCircularBuffer() -> unsigned int"""
  return _pyAndor.GetSizeOfCircularBuffer()

def GetSlotBusDeviceFunction(*args, **kwargs):
  """GetSlotBusDeviceFunction(DWORD dwSlot, DWORD dwBus, DWORD dwDevice, DWORD dwFunction) -> unsigned int"""
  return _pyAndor.GetSlotBusDeviceFunction(*args, **kwargs)

def GetSoftwareVersion():
  """GetSoftwareVersion() -> unsigned int"""
  return _pyAndor.GetSoftwareVersion()

def GetSpoolProgress():
  """GetSpoolProgress() -> unsigned int"""
  return _pyAndor.GetSpoolProgress()

def GetStatus():
  """GetStatus() -> unsigned int"""
  return _pyAndor.GetStatus()

def GetTemperature():
  """GetTemperature() -> unsigned int"""
  return _pyAndor.GetTemperature()

def GetTemperatureF():
  """GetTemperatureF() -> unsigned int"""
  return _pyAndor.GetTemperatureF()

def GetTemperatureRange():
  """GetTemperatureRange() -> unsigned int"""
  return _pyAndor.GetTemperatureRange()

def GetTotalNumberImagesAcquired():
  """GetTotalNumberImagesAcquired() -> unsigned int"""
  return _pyAndor.GetTotalNumberImagesAcquired()

def GetVerticalSpeed(*args, **kwargs):
  """GetVerticalSpeed(int index) -> unsigned int"""
  return _pyAndor.GetVerticalSpeed(*args, **kwargs)

def GetVSSpeed(*args, **kwargs):
  """GetVSSpeed(int index) -> unsigned int"""
  return _pyAndor.GetVSSpeed(*args, **kwargs)

def GPIBReceive(*args, **kwargs):
  """GPIBReceive(int id, short address, char text, int size) -> unsigned int"""
  return _pyAndor.GPIBReceive(*args, **kwargs)

def GPIBSend(*args, **kwargs):
  """GPIBSend(int id, short address, char text) -> unsigned int"""
  return _pyAndor.GPIBSend(*args, **kwargs)

def I2CBurstRead(*args, **kwargs):
  """I2CBurstRead(BYTE i2cAddress, long nBytes, BYTE data) -> unsigned int"""
  return _pyAndor.I2CBurstRead(*args, **kwargs)

def I2CBurstWrite(*args, **kwargs):
  """I2CBurstWrite(BYTE i2cAddress, long nBytes, BYTE data) -> unsigned int"""
  return _pyAndor.I2CBurstWrite(*args, **kwargs)

def I2CRead(*args, **kwargs):
  """I2CRead(BYTE deviceID, BYTE intAddress, BYTE pdata) -> unsigned int"""
  return _pyAndor.I2CRead(*args, **kwargs)

def I2CReset():
  """I2CReset() -> unsigned int"""
  return _pyAndor.I2CReset()

def I2CWrite(*args, **kwargs):
  """I2CWrite(BYTE deviceID, BYTE intAddress, BYTE data) -> unsigned int"""
  return _pyAndor.I2CWrite(*args, **kwargs)

def IdAndorDll():
  """IdAndorDll() -> unsigned int"""
  return _pyAndor.IdAndorDll()

def InAuxPort(*args, **kwargs):
  """InAuxPort(int port) -> unsigned int"""
  return _pyAndor.InAuxPort(*args, **kwargs)

def Initialize(*args, **kwargs):
  """Initialize(char dir) -> unsigned int"""
  return _pyAndor.Initialize(*args, **kwargs)

def InitializeDevice(*args, **kwargs):
  """InitializeDevice(char dir) -> unsigned int"""
  return _pyAndor.InitializeDevice(*args, **kwargs)

def IsInternalMechanicalShutter():
  """IsInternalMechanicalShutter() -> unsigned int"""
  return _pyAndor.IsInternalMechanicalShutter()

def IsPreAmpGainAvailable(*args, **kwargs):
  """IsPreAmpGainAvailable(int channel, int amplifier, int index, int pa) -> unsigned int"""
  return _pyAndor.IsPreAmpGainAvailable(*args, **kwargs)

def Merge(*args, **kwargs):
  """
    Merge(long array, long nOrder, long nPoint, long nPixel, 
        float coeff, long fit, long hbin, long output, 
        float start, float step) -> unsigned int
    """
  return _pyAndor.Merge(*args, **kwargs)

def OutAuxPort(*args, **kwargs):
  """OutAuxPort(int port, int state) -> unsigned int"""
  return _pyAndor.OutAuxPort(*args, **kwargs)

def PrepareAcquisition():
  """PrepareAcquisition() -> unsigned int"""
  return _pyAndor.PrepareAcquisition()

def SaveAsBmp(*args, **kwargs):
  """SaveAsBmp(char path, char palette, long ymin, long ymax) -> unsigned int"""
  return _pyAndor.SaveAsBmp(*args, **kwargs)

def SaveAsCommentedSif(*args, **kwargs):
  """SaveAsCommentedSif(char path, char comment) -> unsigned int"""
  return _pyAndor.SaveAsCommentedSif(*args, **kwargs)

def SaveAsEDF(*args, **kwargs):
  """SaveAsEDF(char _szPath, int _iMode) -> unsigned int"""
  return _pyAndor.SaveAsEDF(*args, **kwargs)

def SaveAsSif(*args, **kwargs):
  """SaveAsSif(char path) -> unsigned int"""
  return _pyAndor.SaveAsSif(*args, **kwargs)

def SaveAsFITS(*args, **kwargs):
  """SaveAsFITS(char szFileTitle, int type) -> unsigned int"""
  return _pyAndor.SaveAsFITS(*args, **kwargs)

def SaveAsTiff(*args, **kwargs):
  """SaveAsTiff(char path, char palette, int position, int type) -> unsigned int"""
  return _pyAndor.SaveAsTiff(*args, **kwargs)

def SaveEEPROMToFile(*args, **kwargs):
  """SaveEEPROMToFile(char cFileName) -> unsigned int"""
  return _pyAndor.SaveEEPROMToFile(*args, **kwargs)

def SaveToClipBoard(*args, **kwargs):
  """SaveToClipBoard(char palette) -> unsigned int"""
  return _pyAndor.SaveToClipBoard(*args, **kwargs)

def SelectDevice(*args, **kwargs):
  """SelectDevice(int devNum) -> unsigned int"""
  return _pyAndor.SelectDevice(*args, **kwargs)

def SetAccumulationCycleTime(*args, **kwargs):
  """SetAccumulationCycleTime(float time) -> unsigned int"""
  return _pyAndor.SetAccumulationCycleTime(*args, **kwargs)

def SetAcquisitionMode(*args, **kwargs):
  """SetAcquisitionMode(int mode) -> unsigned int"""
  return _pyAndor.SetAcquisitionMode(*args, **kwargs)

def SetAcquisitionType(*args, **kwargs):
  """SetAcquisitionType(int type) -> unsigned int"""
  return _pyAndor.SetAcquisitionType(*args, **kwargs)

def SetADChannel(*args, **kwargs):
  """SetADChannel(int channel) -> unsigned int"""
  return _pyAndor.SetADChannel(*args, **kwargs)

def SetBackground(*args, **kwargs):
  """SetBackground(long array, unsigned long size) -> unsigned int"""
  return _pyAndor.SetBackground(*args, **kwargs)

def SetBaselineClamp(*args, **kwargs):
  """SetBaselineClamp(int state) -> unsigned int"""
  return _pyAndor.SetBaselineClamp(*args, **kwargs)

def SetBaselineOffset(*args, **kwargs):
  """SetBaselineOffset(int offset) -> unsigned int"""
  return _pyAndor.SetBaselineOffset(*args, **kwargs)

def SetComplexImage(*args, **kwargs):
  """SetComplexImage(int numAreas) -> unsigned int"""
  return _pyAndor.SetComplexImage(*args, **kwargs)

def SetCoolerMode(*args, **kwargs):
  """SetCoolerMode(int mode) -> unsigned int"""
  return _pyAndor.SetCoolerMode(*args, **kwargs)

def SetCurrentCamera(*args, **kwargs):
  """SetCurrentCamera(long cameraHandle) -> unsigned int"""
  return _pyAndor.SetCurrentCamera(*args, **kwargs)

def SetCustomTrackHBin(*args, **kwargs):
  """SetCustomTrackHBin(int bin) -> unsigned int"""
  return _pyAndor.SetCustomTrackHBin(*args, **kwargs)

def SetCropMode(*args, **kwargs):
  """SetCropMode(int active, int cropheight, int reserved) -> unsigned int"""
  return _pyAndor.SetCropMode(*args, **kwargs)

def SetDataType(*args, **kwargs):
  """SetDataType(int type) -> unsigned int"""
  return _pyAndor.SetDataType(*args, **kwargs)

def SetDDGAddress(*args, **kwargs):
  """SetDDGAddress(BYTE t0, BYTE t1, BYTE t2, BYTE tt, BYTE address) -> unsigned int"""
  return _pyAndor.SetDDGAddress(*args, **kwargs)

def SetDDGGain(*args, **kwargs):
  """SetDDGGain(int gain) -> unsigned int"""
  return _pyAndor.SetDDGGain(*args, **kwargs)

def SetDDGGateStep(*args, **kwargs):
  """SetDDGGateStep(double step) -> unsigned int"""
  return _pyAndor.SetDDGGateStep(*args, **kwargs)

def SetDDGInsertionDelay(*args, **kwargs):
  """SetDDGInsertionDelay(int state) -> unsigned int"""
  return _pyAndor.SetDDGInsertionDelay(*args, **kwargs)

def SetDDGIntelligate(*args, **kwargs):
  """SetDDGIntelligate(int state) -> unsigned int"""
  return _pyAndor.SetDDGIntelligate(*args, **kwargs)

def SetDDGIOC(*args, **kwargs):
  """SetDDGIOC(int state) -> unsigned int"""
  return _pyAndor.SetDDGIOC(*args, **kwargs)

def SetDDGIOCFrequency(*args, **kwargs):
  """SetDDGIOCFrequency(double frequency) -> unsigned int"""
  return _pyAndor.SetDDGIOCFrequency(*args, **kwargs)

def SetDDGTimes(*args, **kwargs):
  """SetDDGTimes(double t0, double t1, double t2) -> unsigned int"""
  return _pyAndor.SetDDGTimes(*args, **kwargs)

def SetDDGTriggerMode(*args, **kwargs):
  """SetDDGTriggerMode(int mode) -> unsigned int"""
  return _pyAndor.SetDDGTriggerMode(*args, **kwargs)

def SetDDGVariableGateStep(*args, **kwargs):
  """SetDDGVariableGateStep(int mode, double p1, double p2) -> unsigned int"""
  return _pyAndor.SetDDGVariableGateStep(*args, **kwargs)

def SetDelayGenerator(*args, **kwargs):
  """SetDelayGenerator(int board, short address, int type) -> unsigned int"""
  return _pyAndor.SetDelayGenerator(*args, **kwargs)

def SetDMAParameters(*args, **kwargs):
  """SetDMAParameters(int MaxImagesPerDMA, float SecondsPerDMA) -> unsigned int"""
  return _pyAndor.SetDMAParameters(*args, **kwargs)

def SetDriverEvent(*args, **kwargs):
  """SetDriverEvent(HANDLE event) -> unsigned int"""
  return _pyAndor.SetDriverEvent(*args, **kwargs)

def SetFPDP(*args, **kwargs):
  """SetFPDP(int state) -> unsigned int"""
  return _pyAndor.SetFPDP(*args, **kwargs)

def SetAcqStatusEvent(*args, **kwargs):
  """SetAcqStatusEvent(HANDLE event) -> unsigned int"""
  return _pyAndor.SetAcqStatusEvent(*args, **kwargs)

def GetCameraEventStatus():
  """GetCameraEventStatus() -> unsigned int"""
  return _pyAndor.GetCameraEventStatus()

def SetPCIMode(*args, **kwargs):
  """SetPCIMode(int mode, int value) -> unsigned int"""
  return _pyAndor.SetPCIMode(*args, **kwargs)

def SetEMAdvanced(*args, **kwargs):
  """SetEMAdvanced(int state) -> unsigned int"""
  return _pyAndor.SetEMAdvanced(*args, **kwargs)

def SetEMCCDGain(*args, **kwargs):
  """SetEMCCDGain(int gain) -> unsigned int"""
  return _pyAndor.SetEMCCDGain(*args, **kwargs)

def SetEMGainMode(*args, **kwargs):
  """SetEMGainMode(int mode) -> unsigned int"""
  return _pyAndor.SetEMGainMode(*args, **kwargs)

def SetEMClockCompensation(*args, **kwargs):
  """SetEMClockCompensation(int EMClockCompensationFlag) -> unsigned int"""
  return _pyAndor.SetEMClockCompensation(*args, **kwargs)

def SetExposureTime(*args, **kwargs):
  """SetExposureTime(float time) -> unsigned int"""
  return _pyAndor.SetExposureTime(*args, **kwargs)

def SetFanMode(*args, **kwargs):
  """SetFanMode(int mode) -> unsigned int"""
  return _pyAndor.SetFanMode(*args, **kwargs)

def SetFastExtTrigger(*args, **kwargs):
  """SetFastExtTrigger(int mode) -> unsigned int"""
  return _pyAndor.SetFastExtTrigger(*args, **kwargs)

def SetFastKinetics(*args, **kwargs):
  """
    SetFastKinetics(int exposedRows, int seriesLength, float time, int mode, 
        int hbin, int vbin) -> unsigned int
    """
  return _pyAndor.SetFastKinetics(*args, **kwargs)

def SetFastKineticsEx(*args, **kwargs):
  """
    SetFastKineticsEx(int exposedRows, int seriesLength, float time, int mode, 
        int hbin, int vbin, int offset) -> unsigned int
    """
  return _pyAndor.SetFastKineticsEx(*args, **kwargs)

def SetFilterMode(*args, **kwargs):
  """SetFilterMode(int mode) -> unsigned int"""
  return _pyAndor.SetFilterMode(*args, **kwargs)

def SetFilterParameters(*args, **kwargs):
  """
    SetFilterParameters(int width, float sensitivity, int range, float accept, 
        int smooth, int noise) -> unsigned int
    """
  return _pyAndor.SetFilterParameters(*args, **kwargs)

def SetFKVShiftSpeed(*args, **kwargs):
  """SetFKVShiftSpeed(int index) -> unsigned int"""
  return _pyAndor.SetFKVShiftSpeed(*args, **kwargs)

def SetFrameTransferMode(*args, **kwargs):
  """SetFrameTransferMode(int mode) -> unsigned int"""
  return _pyAndor.SetFrameTransferMode(*args, **kwargs)

def SetFullImage(*args, **kwargs):
  """SetFullImage(int hbin, int vbin) -> unsigned int"""
  return _pyAndor.SetFullImage(*args, **kwargs)

def SetFVBHBin(*args, **kwargs):
  """SetFVBHBin(int bin) -> unsigned int"""
  return _pyAndor.SetFVBHBin(*args, **kwargs)

def SetGain(*args, **kwargs):
  """SetGain(int gain) -> unsigned int"""
  return _pyAndor.SetGain(*args, **kwargs)

def SetGate(*args, **kwargs):
  """SetGate(float delay, float width, float step) -> unsigned int"""
  return _pyAndor.SetGate(*args, **kwargs)

def SetGateMode(*args, **kwargs):
  """SetGateMode(int gatemode) -> unsigned int"""
  return _pyAndor.SetGateMode(*args, **kwargs)

def SetHighCapacity(*args, **kwargs):
  """SetHighCapacity(int state) -> unsigned int"""
  return _pyAndor.SetHighCapacity(*args, **kwargs)

def SetHorizontalSpeed(*args, **kwargs):
  """SetHorizontalSpeed(int index) -> unsigned int"""
  return _pyAndor.SetHorizontalSpeed(*args, **kwargs)

def SetHSSpeed(*args, **kwargs):
  """SetHSSpeed(int type, int index) -> unsigned int"""
  return _pyAndor.SetHSSpeed(*args, **kwargs)

def SetImage(*args, **kwargs):
  """
    SetImage(int hbin, int vbin, int hstart, int hend, int vstart, 
        int vend) -> unsigned int
    """
  return _pyAndor.SetImage(*args, **kwargs)

def SetKineticCycleTime(*args, **kwargs):
  """SetKineticCycleTime(float time) -> unsigned int"""
  return _pyAndor.SetKineticCycleTime(*args, **kwargs)

def SetMCPGating(*args, **kwargs):
  """SetMCPGating(int gating) -> unsigned int"""
  return _pyAndor.SetMCPGating(*args, **kwargs)

def SetMessageWindow(*args, **kwargs):
  """SetMessageWindow(HWND wnd) -> unsigned int"""
  return _pyAndor.SetMessageWindow(*args, **kwargs)

def SetMultiTrack(*args, **kwargs):
  """SetMultiTrack(int number, int height, int offset, int bottom, int gap) -> unsigned int"""
  return _pyAndor.SetMultiTrack(*args, **kwargs)

def SetMultiTrackHBin(*args, **kwargs):
  """SetMultiTrackHBin(int bin) -> unsigned int"""
  return _pyAndor.SetMultiTrackHBin(*args, **kwargs)

def SetNextAddress(*args, **kwargs):
  """SetNextAddress(long data, long lowAdd, long highAdd, long len, long physical) -> unsigned int"""
  return _pyAndor.SetNextAddress(*args, **kwargs)

def SetNextAddress16(*args, **kwargs):
  """SetNextAddress16(long data, long lowAdd, long highAdd, long len, long physical) -> unsigned int"""
  return _pyAndor.SetNextAddress16(*args, **kwargs)

def SetNumberAccumulations(*args, **kwargs):
  """SetNumberAccumulations(int number) -> unsigned int"""
  return _pyAndor.SetNumberAccumulations(*args, **kwargs)

def SetNumberKinetics(*args, **kwargs):
  """SetNumberKinetics(int number) -> unsigned int"""
  return _pyAndor.SetNumberKinetics(*args, **kwargs)

def SetOutputAmplifier(*args, **kwargs):
  """SetOutputAmplifier(int type) -> unsigned int"""
  return _pyAndor.SetOutputAmplifier(*args, **kwargs)

def SetPhotonCounting(*args, **kwargs):
  """SetPhotonCounting(int state) -> unsigned int"""
  return _pyAndor.SetPhotonCounting(*args, **kwargs)

def SetPhotonCountingThreshold(*args, **kwargs):
  """SetPhotonCountingThreshold(long min, long max) -> unsigned int"""
  return _pyAndor.SetPhotonCountingThreshold(*args, **kwargs)

def SetPixelMode(*args, **kwargs):
  """SetPixelMode(int bitdepth, int colormode) -> unsigned int"""
  return _pyAndor.SetPixelMode(*args, **kwargs)

def SetPreAmpGain(*args, **kwargs):
  """SetPreAmpGain(int index) -> unsigned int"""
  return _pyAndor.SetPreAmpGain(*args, **kwargs)

def SetRandomTracks(*args, **kwargs):
  """SetRandomTracks(int numTracks) -> unsigned int"""
  return _pyAndor.SetRandomTracks(*args, **kwargs)

def SetReadMode(*args, **kwargs):
  """SetReadMode(int mode) -> unsigned int"""
  return _pyAndor.SetReadMode(*args, **kwargs)

def SetRegisterDump(*args, **kwargs):
  """SetRegisterDump(int mode) -> unsigned int"""
  return _pyAndor.SetRegisterDump(*args, **kwargs)

def SetShutter(*args, **kwargs):
  """SetShutter(int type, int mode, int closingtime, int openingtime) -> unsigned int"""
  return _pyAndor.SetShutter(*args, **kwargs)

def SetSifComment(*args, **kwargs):
  """SetSifComment(char comment) -> unsigned int"""
  return _pyAndor.SetSifComment(*args, **kwargs)

def SetSingleTrack(*args, **kwargs):
  """SetSingleTrack(int centre, int height) -> unsigned int"""
  return _pyAndor.SetSingleTrack(*args, **kwargs)

def SetSingleTrackHBin(*args, **kwargs):
  """SetSingleTrackHBin(int bin) -> unsigned int"""
  return _pyAndor.SetSingleTrackHBin(*args, **kwargs)

def SetSpool(*args, **kwargs):
  """SetSpool(int active, int method, char path, int framebuffersize) -> unsigned int"""
  return _pyAndor.SetSpool(*args, **kwargs)

def SetStorageMode(*args, **kwargs):
  """SetStorageMode(long mode) -> unsigned int"""
  return _pyAndor.SetStorageMode(*args, **kwargs)

def SetTemperature(*args, **kwargs):
  """SetTemperature(int temperature) -> unsigned int"""
  return _pyAndor.SetTemperature(*args, **kwargs)

def SetTriggerMode(*args, **kwargs):
  """SetTriggerMode(int mode) -> unsigned int"""
  return _pyAndor.SetTriggerMode(*args, **kwargs)

def SetUserEvent(*args, **kwargs):
  """SetUserEvent(HANDLE event) -> unsigned int"""
  return _pyAndor.SetUserEvent(*args, **kwargs)

def SetUSGenomics(*args, **kwargs):
  """SetUSGenomics(long width, long height) -> unsigned int"""
  return _pyAndor.SetUSGenomics(*args, **kwargs)

def SetVerticalRowBuffer(*args, **kwargs):
  """SetVerticalRowBuffer(int rows) -> unsigned int"""
  return _pyAndor.SetVerticalRowBuffer(*args, **kwargs)

def SetVerticalSpeed(*args, **kwargs):
  """SetVerticalSpeed(int index) -> unsigned int"""
  return _pyAndor.SetVerticalSpeed(*args, **kwargs)

def SetVirtualChip(*args, **kwargs):
  """SetVirtualChip(int state) -> unsigned int"""
  return _pyAndor.SetVirtualChip(*args, **kwargs)

def SetVSAmplitude(*args, **kwargs):
  """SetVSAmplitude(int index) -> unsigned int"""
  return _pyAndor.SetVSAmplitude(*args, **kwargs)

def SetVSSpeed(*args, **kwargs):
  """SetVSSpeed(int index) -> unsigned int"""
  return _pyAndor.SetVSSpeed(*args, **kwargs)

def ShutDown():
  """ShutDown() -> unsigned int"""
  return _pyAndor.ShutDown()

def StartAcquisition():
  """StartAcquisition() -> unsigned int"""
  return _pyAndor.StartAcquisition()

def UnMapPhysicalAddress():
  """UnMapPhysicalAddress() -> unsigned int"""
  return _pyAndor.UnMapPhysicalAddress()

def WaitForAcquisition():
  """WaitForAcquisition() -> unsigned int"""
  return _pyAndor.WaitForAcquisition()

def WaitForAcquisitionByHandle(*args, **kwargs):
  """WaitForAcquisitionByHandle(long cameraHandle) -> unsigned int"""
  return _pyAndor.WaitForAcquisitionByHandle(*args, **kwargs)

def GetControllerCardModel():
  """GetControllerCardModel() -> unsigned int"""
  return _pyAndor.GetControllerCardModel()
DRV_ERROR_CODES = _pyAndor.DRV_ERROR_CODES
DRV_SUCCESS = _pyAndor.DRV_SUCCESS
DRV_VXDNOTINSTALLED = _pyAndor.DRV_VXDNOTINSTALLED
DRV_ERROR_SCAN = _pyAndor.DRV_ERROR_SCAN
DRV_ERROR_CHECK_SUM = _pyAndor.DRV_ERROR_CHECK_SUM
DRV_ERROR_FILELOAD = _pyAndor.DRV_ERROR_FILELOAD
DRV_UNKNOWN_FUNCTION = _pyAndor.DRV_UNKNOWN_FUNCTION
DRV_ERROR_VXD_INIT = _pyAndor.DRV_ERROR_VXD_INIT
DRV_ERROR_ADDRESS = _pyAndor.DRV_ERROR_ADDRESS
DRV_ERROR_PAGELOCK = _pyAndor.DRV_ERROR_PAGELOCK
DRV_ERROR_PAGEUNLOCK = _pyAndor.DRV_ERROR_PAGEUNLOCK
DRV_ERROR_BOARDTEST = _pyAndor.DRV_ERROR_BOARDTEST
DRV_ERROR_ACK = _pyAndor.DRV_ERROR_ACK
DRV_ERROR_UP_FIFO = _pyAndor.DRV_ERROR_UP_FIFO
DRV_ERROR_PATTERN = _pyAndor.DRV_ERROR_PATTERN
DRV_ACQUISITION_ERRORS = _pyAndor.DRV_ACQUISITION_ERRORS
DRV_ACQ_BUFFER = _pyAndor.DRV_ACQ_BUFFER
DRV_ACQ_DOWNFIFO_FULL = _pyAndor.DRV_ACQ_DOWNFIFO_FULL
DRV_PROC_UNKONWN_INSTRUCTION = _pyAndor.DRV_PROC_UNKONWN_INSTRUCTION
DRV_ILLEGAL_OP_CODE = _pyAndor.DRV_ILLEGAL_OP_CODE
DRV_KINETIC_TIME_NOT_MET = _pyAndor.DRV_KINETIC_TIME_NOT_MET
DRV_ACCUM_TIME_NOT_MET = _pyAndor.DRV_ACCUM_TIME_NOT_MET
DRV_NO_NEW_DATA = _pyAndor.DRV_NO_NEW_DATA
DRV_SPOOLERROR = _pyAndor.DRV_SPOOLERROR
DRV_SPOOLSETUPERROR = _pyAndor.DRV_SPOOLSETUPERROR
DRV_FILESIZELIMITERROR = _pyAndor.DRV_FILESIZELIMITERROR
DRV_TEMPERATURE_CODES = _pyAndor.DRV_TEMPERATURE_CODES
DRV_TEMPERATURE_OFF = _pyAndor.DRV_TEMPERATURE_OFF
DRV_TEMPERATURE_NOT_STABILIZED = _pyAndor.DRV_TEMPERATURE_NOT_STABILIZED
DRV_TEMPERATURE_STABILIZED = _pyAndor.DRV_TEMPERATURE_STABILIZED
DRV_TEMPERATURE_NOT_REACHED = _pyAndor.DRV_TEMPERATURE_NOT_REACHED
DRV_TEMPERATURE_OUT_RANGE = _pyAndor.DRV_TEMPERATURE_OUT_RANGE
DRV_TEMPERATURE_NOT_SUPPORTED = _pyAndor.DRV_TEMPERATURE_NOT_SUPPORTED
DRV_TEMPERATURE_DRIFT = _pyAndor.DRV_TEMPERATURE_DRIFT
DRV_TEMP_CODES = _pyAndor.DRV_TEMP_CODES
DRV_TEMP_OFF = _pyAndor.DRV_TEMP_OFF
DRV_TEMP_NOT_STABILIZED = _pyAndor.DRV_TEMP_NOT_STABILIZED
DRV_TEMP_STABILIZED = _pyAndor.DRV_TEMP_STABILIZED
DRV_TEMP_NOT_REACHED = _pyAndor.DRV_TEMP_NOT_REACHED
DRV_TEMP_OUT_RANGE = _pyAndor.DRV_TEMP_OUT_RANGE
DRV_TEMP_NOT_SUPPORTED = _pyAndor.DRV_TEMP_NOT_SUPPORTED
DRV_TEMP_DRIFT = _pyAndor.DRV_TEMP_DRIFT
DRV_GENERAL_ERRORS = _pyAndor.DRV_GENERAL_ERRORS
DRV_INVALID_AUX = _pyAndor.DRV_INVALID_AUX
DRV_COF_NOTLOADED = _pyAndor.DRV_COF_NOTLOADED
DRV_FPGAPROG = _pyAndor.DRV_FPGAPROG
DRV_FLEXERROR = _pyAndor.DRV_FLEXERROR
DRV_GPIBERROR = _pyAndor.DRV_GPIBERROR
DRV_EEPROMVERSIONERROR = _pyAndor.DRV_EEPROMVERSIONERROR
DRV_DATATYPE = _pyAndor.DRV_DATATYPE
DRV_DRIVER_ERRORS = _pyAndor.DRV_DRIVER_ERRORS
DRV_P1INVALID = _pyAndor.DRV_P1INVALID
DRV_P2INVALID = _pyAndor.DRV_P2INVALID
DRV_P3INVALID = _pyAndor.DRV_P3INVALID
DRV_P4INVALID = _pyAndor.DRV_P4INVALID
DRV_INIERROR = _pyAndor.DRV_INIERROR
DRV_COFERROR = _pyAndor.DRV_COFERROR
DRV_ACQUIRING = _pyAndor.DRV_ACQUIRING
DRV_IDLE = _pyAndor.DRV_IDLE
DRV_TEMPCYCLE = _pyAndor.DRV_TEMPCYCLE
DRV_NOT_INITIALIZED = _pyAndor.DRV_NOT_INITIALIZED
DRV_P5INVALID = _pyAndor.DRV_P5INVALID
DRV_P6INVALID = _pyAndor.DRV_P6INVALID
DRV_INVALID_MODE = _pyAndor.DRV_INVALID_MODE
DRV_INVALID_FILTER = _pyAndor.DRV_INVALID_FILTER
DRV_I2CERRORS = _pyAndor.DRV_I2CERRORS
DRV_I2CDEVNOTFOUND = _pyAndor.DRV_I2CDEVNOTFOUND
DRV_I2CTIMEOUT = _pyAndor.DRV_I2CTIMEOUT
DRV_P7INVALID = _pyAndor.DRV_P7INVALID
DRV_USBERROR = _pyAndor.DRV_USBERROR
DRV_IOCERROR = _pyAndor.DRV_IOCERROR
DRV_VRMVERSIONERROR = _pyAndor.DRV_VRMVERSIONERROR
DRV_USB_INTERRUPT_ENDPOINT_ERROR = _pyAndor.DRV_USB_INTERRUPT_ENDPOINT_ERROR
DRV_ERROR_NOCAMERA = _pyAndor.DRV_ERROR_NOCAMERA
DRV_NOT_SUPPORTED = _pyAndor.DRV_NOT_SUPPORTED
DRV_NOT_AVAILABLE = _pyAndor.DRV_NOT_AVAILABLE
DRV_ERROR_MAP = _pyAndor.DRV_ERROR_MAP
DRV_ERROR_UNMAP = _pyAndor.DRV_ERROR_UNMAP
DRV_ERROR_MDL = _pyAndor.DRV_ERROR_MDL
DRV_ERROR_UNMDL = _pyAndor.DRV_ERROR_UNMDL
DRV_ERROR_BUFFSIZE = _pyAndor.DRV_ERROR_BUFFSIZE
DRV_ERROR_NOHANDLE = _pyAndor.DRV_ERROR_NOHANDLE
DRV_GATING_NOT_AVAILABLE = _pyAndor.DRV_GATING_NOT_AVAILABLE
DRV_FPGA_VOLTAGE_ERROR = _pyAndor.DRV_FPGA_VOLTAGE_ERROR
DRV_OW_CMD_FAIL = _pyAndor.DRV_OW_CMD_FAIL
DRV_OWMEMORY_BAD_ADDR = _pyAndor.DRV_OWMEMORY_BAD_ADDR
DRV_OWCMD_NOT_AVAILABLE = _pyAndor.DRV_OWCMD_NOT_AVAILABLE
DRV_OW_NO_SLAVES = _pyAndor.DRV_OW_NO_SLAVES
DRV_OW_NOT_INITIALIZED = _pyAndor.DRV_OW_NOT_INITIALIZED
DRV_OW_ERROR_SLAVE_NUM = _pyAndor.DRV_OW_ERROR_SLAVE_NUM
AC_ACQMODE_SINGLE = _pyAndor.AC_ACQMODE_SINGLE
AC_ACQMODE_VIDEO = _pyAndor.AC_ACQMODE_VIDEO
AC_ACQMODE_ACCUMULATE = _pyAndor.AC_ACQMODE_ACCUMULATE
AC_ACQMODE_KINETIC = _pyAndor.AC_ACQMODE_KINETIC
AC_ACQMODE_FRAMETRANSFER = _pyAndor.AC_ACQMODE_FRAMETRANSFER
AC_ACQMODE_FASTKINETICS = _pyAndor.AC_ACQMODE_FASTKINETICS
AC_READMODE_FULLIMAGE = _pyAndor.AC_READMODE_FULLIMAGE
AC_READMODE_SUBIMAGE = _pyAndor.AC_READMODE_SUBIMAGE
AC_READMODE_SINGLETRACK = _pyAndor.AC_READMODE_SINGLETRACK
AC_READMODE_FVB = _pyAndor.AC_READMODE_FVB
AC_READMODE_MULTITRACK = _pyAndor.AC_READMODE_MULTITRACK
AC_READMODE_RANDOMTRACK = _pyAndor.AC_READMODE_RANDOMTRACK
AC_TRIGGERMODE_INTERNAL = _pyAndor.AC_TRIGGERMODE_INTERNAL
AC_TRIGGERMODE_EXTERNAL = _pyAndor.AC_TRIGGERMODE_EXTERNAL
AC_CAMERATYPE_PDA = _pyAndor.AC_CAMERATYPE_PDA
AC_CAMERATYPE_IXON = _pyAndor.AC_CAMERATYPE_IXON
AC_CAMERATYPE_ICCD = _pyAndor.AC_CAMERATYPE_ICCD
AC_CAMERATYPE_EMCCD = _pyAndor.AC_CAMERATYPE_EMCCD
AC_CAMERATYPE_CCD = _pyAndor.AC_CAMERATYPE_CCD
AC_CAMERATYPE_ISTAR = _pyAndor.AC_CAMERATYPE_ISTAR
AC_CAMERATYPE_VIDEO = _pyAndor.AC_CAMERATYPE_VIDEO
AC_CAMERATYPE_IDUS = _pyAndor.AC_CAMERATYPE_IDUS
AC_CAMERATYPE_NEWTON = _pyAndor.AC_CAMERATYPE_NEWTON
AC_CAMERATYPE_SURCAM = _pyAndor.AC_CAMERATYPE_SURCAM
AC_CAMERATYPE_USBISTAR = _pyAndor.AC_CAMERATYPE_USBISTAR
AC_CAMERATYPE_LUCA = _pyAndor.AC_CAMERATYPE_LUCA
AC_PIXELMODE_8BIT = _pyAndor.AC_PIXELMODE_8BIT
AC_PIXELMODE_14BIT = _pyAndor.AC_PIXELMODE_14BIT
AC_PIXELMODE_16BIT = _pyAndor.AC_PIXELMODE_16BIT
AC_PIXELMODE_32BIT = _pyAndor.AC_PIXELMODE_32BIT
AC_PIXELMODE_MONO = _pyAndor.AC_PIXELMODE_MONO
AC_PIXELMODE_RGB = _pyAndor.AC_PIXELMODE_RGB
AC_PIXELMODE_CMY = _pyAndor.AC_PIXELMODE_CMY
AC_SETFUNCTION_VREADOUT = _pyAndor.AC_SETFUNCTION_VREADOUT
AC_SETFUNCTION_HREADOUT = _pyAndor.AC_SETFUNCTION_HREADOUT
AC_SETFUNCTION_TEMPERATURE = _pyAndor.AC_SETFUNCTION_TEMPERATURE
AC_SETFUNCTION_GAIN = _pyAndor.AC_SETFUNCTION_GAIN
AC_SETFUNCTION_EMCCDGAIN = _pyAndor.AC_SETFUNCTION_EMCCDGAIN
AC_GETFUNCTION_TEMPERATURE = _pyAndor.AC_GETFUNCTION_TEMPERATURE
AC_GETFUNCTION_TARGETTEMPERATURE = _pyAndor.AC_GETFUNCTION_TARGETTEMPERATURE
AC_GETFUNCTION_TEMPERATURERANGE = _pyAndor.AC_GETFUNCTION_TEMPERATURERANGE
AC_GETFUNCTION_DETECTORSIZE = _pyAndor.AC_GETFUNCTION_DETECTORSIZE
AC_GETFUNCTION_GAIN = _pyAndor.AC_GETFUNCTION_GAIN
AC_GETFUNCTION_EMCCDGAIN = _pyAndor.AC_GETFUNCTION_EMCCDGAIN
AC_FEATURES_POLLING = _pyAndor.AC_FEATURES_POLLING
AC_FEATURES_EVENTS = _pyAndor.AC_FEATURES_EVENTS
AC_FEATURES_SPOOLING = _pyAndor.AC_FEATURES_SPOOLING
AC_FEATURES_SHUTTER = _pyAndor.AC_FEATURES_SHUTTER
AC_EMGAIN_8BIT = _pyAndor.AC_EMGAIN_8BIT
AC_EMGAIN_12BIT = _pyAndor.AC_EMGAIN_12BIT
AC_EMGAIN_LINEAR12 = _pyAndor.AC_EMGAIN_LINEAR12
AC_EMGAIN_REAL12 = _pyAndor.AC_EMGAIN_REAL12
# This file is compatible with both classic and new-style classes.


